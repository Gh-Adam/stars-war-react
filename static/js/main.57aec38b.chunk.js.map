{"version":3,"sources":["components/Person.js","components/People.js","components/Planet.js","components/Planets.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","className","name","gender","birth_year","getPeopleList","key","page","a","fetch","res","json","People","useState","setPage","usePaginatedQuery","data","resolvedData","latestData","status","results","length","onClick","current","Math","max","disabled","pages","Array","from","keys","map","i","classNames","active","generateButtonList","count","ceil","getPagesLength","next","Planet","planet","population","terrain","getPlanetsList","Planets","Navbar","App","initialIsOpen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57aec38b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Person = ({ person }) => {\r\n  return (\r\n      <div className=\"card\">\r\n        <h4>{person.name}</h4>\r\n        <p>Gender - {person.gender}</p>\r\n        <p>Birth year - {person.birth_year}</p>\r\n      </div>\r\n  );\r\n};\r\nexport default Person;\r\n","import React, { useState } from 'react';\r\nimport { usePaginatedQuery } from 'react-query';\r\nimport Person from './Person';\r\nimport classNames from 'classnames';\r\nconst getPeopleList = async (key, page) => {\r\n  const res = await fetch(`https://swapi.dev/api/people/?page=${page}`);\r\n  return res.json();\r\n};\r\n\r\nconst People = () => {\r\n  const [page, setPage] = useState(1);\r\n  // Use Paginated Query\r\n  const { resolvedData: data, latestData, status} = usePaginatedQuery(['getPeople', page], getPeopleList)\r\n\r\n  \r\n\r\n  const generateButtonList = (pages) => { \r\n    const arr = Array.from(Array(pages).keys()).map(i => i+1);\r\n    const x = arr.map(i => (<button key={i} className={classNames(['page-num', { active : page === i}])} onClick={() => setPage(i)} > {i} </button> ))\r\n    return x;\r\n  }\r\n\r\n  const getPagesLength = (data) => {\r\n    const pages = (data && data.count && data.results.length > 0 ) ? Math.ceil(data.count/data.results.length) : 0;\r\n    return pages;\r\n  } \r\n  return (\r\n    <div>\r\n      <h3>People</h3>\r\n      {/* loading */}\r\n      {status === 'loading' && (\r\n        <div className=\"loading\"> Loading Data .....</div>\r\n      )}\r\n      {/* Error */}\r\n      {status === 'error' && (\r\n        <div className=\"error\"> Error Fetching Data .....</div>\r\n      )}\r\n      {/* No Data Return */}\r\n      {status === 'success' && data?.results?.length === 0 && (\r\n        <div className=\"error\"> No Data Found .....</div>\r\n      )}\r\n      {/* Show Data List */}\r\n      {status === 'success' && data?.results?.length > 0 && (\r\n        <>\r\n          <div className=\"btn-actions\">\r\n            <button\r\n            onClick={() => setPage(current => Math.max(current-1, 1))}\r\n            disabled={page === 1}\r\n            >Prev</button>\r\n\r\n            {   \r\n                generateButtonList(getPagesLength(data))\r\n            }\r\n\r\n            <button\r\n            onClick={() => setPage(current =>  (!latestData || !latestData.next) ? current : current + 1 )}\r\n            disabled={!latestData || !latestData.next}\r\n            >Next</button>\r\n          </div>\r\n          <div className=\"data-list\">\r\n            {data.results.map((person) => (\r\n              <Person key={person.name} person={person} />\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default People;\r\n","import React from 'react';\r\n\r\nconst Planet = ({ planet }) => {\r\n  return (\r\n      <div className=\"card\">\r\n        <h4>{planet.name}</h4>\r\n        <p>Population - {planet.population}</p>\r\n        <p>Terrain - {planet.terrain}</p>\r\n      </div>\r\n  );\r\n};\r\nexport default Planet;\r\n","import React, { useState } from 'react';\r\n// import { useQuery } from 'react-query';\r\nimport { usePaginatedQuery } from 'react-query';\r\nimport Planet from './Planet';\r\nimport classNames from 'classnames';\r\n\r\nconst getPlanetsList = async (key, page) => {\r\n  const res = await fetch(`https://swapi.dev/api/planets/?page=${page}`);\r\n  return res.json();\r\n};\r\n\r\n\r\nconst Planets = () => {\r\n  const [page, setPage] = useState(1);\r\n  // Use Paginated Query\r\n  const { resolvedData: data, latestData, status} = usePaginatedQuery(['getPlants', page], getPlanetsList)\r\n\r\n  const generateButtonList = (pages) => {  \r\n    return Array.from(Array(pages).keys()).map(i => (<button key={i+1} className={classNames(['page-num', { active : page === i+1}])} onClick={() => setPage(i+1)} > {i+1} </button> ));\r\n  }\r\n\r\n  const getPagesLength = (data) => {\r\n    const pages = (data && data.count && data.results.length > 0 ) ? Math.ceil(data.count/data.results.length) : 0;\r\n    return pages;\r\n  } \r\n\r\n\r\n // Query with params variables with Manual Pagination\r\n  // const { data, status } = useQuery(['getPlanets', page], getPlanetsList);\r\n\r\n  // Simple Query without params\r\n  // const { data, status } = useQuery('getPlanets', getPlanetsList);\r\n\r\n  // IF you want make custom Config\r\n  // const { data, status } = useQuery('getPlanets', getPlanetsList, {\r\n  //   // staleTime: 5000,\r\n  //   // cacheTime: 10,\r\n  //   onSuccess: () => console.log('fetching works successfully'),\r\n  //   onError: () => console.log('fetching Failed'),\r\n  //   onSettled: () => console.log('Settling works successfully'),\r\n  // });\r\n  return (\r\n    <div>\r\n      <h3>Planets</h3>\r\n      {/* <button onClick={() => setPage(1)}>page 1</button>\r\n      <button onClick={() => setPage(2)}>page 2</button>\r\n      <button onClick={() => setPage(3)}>page 3</button> */}\r\n      {status}\r\n      {/* loading */}\r\n      {status === 'loading' && (\r\n        <div className=\"loading\"> Loading Data .....</div>\r\n      )}\r\n      {/* Error */}\r\n      {status === 'error' && (\r\n        <div className=\"error\"> Error Fetching Data .....</div>\r\n      )}\r\n      {/* No Data Return */}\r\n      {status === 'success' && data?.results?.length === 0 && (\r\n        <div className=\"error\"> No Data Found .....</div>\r\n      )}\r\n      {/* Show Data List */}\r\n      {status === 'success' && data?.results?.length > 0 && (\r\n        <>\r\n          <div className=\"btn-actions\">\r\n            <button\r\n            onClick={() => setPage(current => Math.max(current-1, 1))}\r\n            disabled={page === 1}\r\n            >Prev</button>\r\n\r\n            {\r\n                generateButtonList(getPagesLength(data))\r\n            }\r\n\r\n            <button\r\n            onClick={() => setPage(current =>  (!latestData || !latestData.next) ? current : current +1 )}\r\n            disabled={!latestData || !latestData.next}\r\n            >Next</button>\r\n          </div>\r\n          <div className=\"data-list\">\r\n          {data.results.map((planet) => (\r\n            <Planet key={planet.name} planet={planet} />\r\n          ))}\r\n        </div>\r\n        </>\r\n        \r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Planets;\r\n","import React from 'react';\r\nconst Navbar = ({ setPage }) => {\r\n  return (\r\n    <nav className=\"list-option\">\r\n      <button onClick={() => setPage('planets')}>Planets</button>\r\n      <button onClick={() => setPage('people')}>People</button>\r\n    </nav>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport People from './components/People';\nimport Planets from './components/Planets';\nimport Navbar from './components/Navbar';\nimport { ReactQueryDevtools } from 'react-query-devtools';\nfunction App() {\n  const [page, setPage] = useState('planets');\n  return (\n    <>\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h2 className=\"title\">Stars War Info</h2>\n          <Navbar setPage={setPage} />\n          <div className=\"content\">\n            {page === 'planets' ? <Planets /> : <People />}\n          </div>\n        </header>\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}